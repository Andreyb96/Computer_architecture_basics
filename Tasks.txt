1 Введение. Принципы построения ЭВМ
	1.1 Цели и задачи курса
		1.1.1 Качество видео можно выбрать
	1.2 Бинарные числа и логические операции
		1.2.1 D5
		1.2.2 2971215073
		1.2.3 53
		1.2.4 -26890
		1.2.5 -32768
		1.2.6 10101
		1.2.7 F9
	1.3 Простейшие электронные компоненты
		1.3.1 NOR соответствует функции комбинации бинарных функций ИЛИ-НЕ; Если на входы элемента NOR подать 1 и 1, то на выходе будет 0
		1.3.2 3
		1.3.3 expression="(X & !(Y & Z)) ^ (Y & !(X & Z)) ^ (Z & !(X & Y))"
		1.3.4 Считать значение хранимое триггером можно многократно; Триггер может хранить 1 бит информации; Если на входах триггера (на двух NOR) низкие уровни напряжения, то на выходах значения различны
		1.3.5 Одним из выходов сумматора является бит переноса в старший разряд; Одним из входов сумматора является бит переноса из младшего разряда; Полный сумматор, учитывающий биты переноса из младшего разряда и переноса в старший разряд имеет 3 входа и 2 выхода
	1.4 Архитектура вычислительной системы
		1.4.1 Согласно принципам Фон-Неймана программы и данные хранятся в единой памяти; В вычислительной системе может быть больше одной шины; В гарвардской архитектуре адреса команд и данных могут пересекаться; Адрес текущей (следующей) исполняемой команды хранится в специальном регистре процессора; Процессор соединен с памятью посредством шины
		1.4.2 Некоторые компоненты компьютера меняют свое состояние в момент прихода импульса от тактового генератора; Тактовый генератор задает общее время в системе; Чем выше частота тактового генератора, тем быстрее процессор выполняет операции
		1.4.3 Порт это условный номер устройства на шине; Если память устройства отображена на адресное пространство основной памяти, то запись в память устройства можно выполнить теми же операциями, что и запись в память; На архитектуре Intel команды IN, OUT -- команды ввода-вывода через порты
		1.4.4 Программные прерывания являются синхронными; Прерывание это сигнал процессору о возникновении события, требующего обработки
		1.4.5 Контроллер прерываний синхронизирует одновременно возникающие прерывания; Номер прерывания совпадает с номером записи в таблице векторов прерываний; Номер прерывания позволяет выбрать обработчик прерываний; Контроллеры прерываний могут объединяться в каскадную схему; Номер прерывания поступает через шину данных
2 Введение в язык ассемблера
	2.1 Структура языка ассемблера
		2.1.1 mov eax, ebx; sub eax, eax; push eax
	2.2 Архитектурное окружение, регистры
		2.2.1 eax; esi
	2.3 Передача параметров через стек
		2.3.1 edi; ecx; ebp; 3; eax
	2.4 Синтаксис команд (Intel, AT&T)
		2.4.1 sub $3,%eax; mov $3, %eax
	2.5 Задачи на программирование
		2.5.1 push $hello call puts add $4,%esp
		2.5.2 add %eax, %edx jc if_overflow mov $1, %eax jmp return if_overflow: mov $0, %eax return:
		2.5.3 power: mov %eax, %ecx loop: dec %edx test %edx, %edx jz after imul %ecx, %eax jmp loop after: ret
3 Базовые элементы операционной системы
	3.1 Задачи операционной системы
		3.1.1 Управление ресурсами компьютера; Управление периферийными устройствами
		3.1.2 Множество адресов, которые можно выставить на шине адреса; Множество e-mail адресов в домене @yandex.ru; Множество степов в этом уроке; Множество номеров домов, расположенных на одной улице; Множество номеров ячеек памяти, физически установленной в компьютере
		3.1.3 Контекст процесса — это набор значений регистров процессора в конкретный момент времени; Процесс владеет адресным пространством; Файл — это пример ресурса, который может принадлежать процессу
		3.1.4 Файл это — именованная последовательность данных, хранимых на диске; Файл это — универсальный системный интерфейс; Имя является атрибутом файла; Файловый интерфейс позволяет работать с устройствами, например мышью или принтером; ioctl — интерфейс управления вводом/выводом через файл
	3.2 Архитектура: планировщик, менеджер памяти, IPC
		3.2.1 Менеджер памяти
		3.2.2 Системные сервисы могут быть оформлены в виде отдельных процессов; Существуют ОС, позволяющие загружать и выгружать свои компоненты в процессе работы; Системный сервис может выполняться в пространстве пользователя; Приложение (процесс) может считать, что использует ресурсы компьютера монопольно
		3.2.3 Приложения могут включать в свой состав разделяемые библиотеки (Shared Objects, DLL); Некоторые драйверы обслуживают не устройства, а протоколы (например TCP/IP)
		3.2.4 Ядро операционной системы может выполнять все инструкции процессора; Системные библиотеки доступны приложениям в User Space; Приложения пользователя исполняются в User Space; В защищенном режиме приложения могут выполнять не все процессорные инструкции
	3.3 Системные вызовы и обработка прерываний
		3.3.1 Прерывание таймера используется для управления многозадачностью; Для операций ввода/вывода могут использоваться прерывания; Указатель на обработчик системных вызовов можно найти в таблице векторов прерываний; Программные прерывания — основа интерфейса операционной системы для приложений; Исключения — это особый класс прерываний, связанный с исключительными ситуациями, возникающими в процессе работы процессора
		3.3.2 Для создания процессов (запуска приложений) используются системные вызовы
		3.3.3 Для исполнения этой программы потребуется механизм системных вызов; Для исполнения этой программы потребуется механизм прерываний
		3.3.4 Драйвер устройства может быть связан с именем в файловой системе; Драйвер — это программный компонент
4 Процессы, потоки, многозадачность
	4.1 Понятие процесса и потока
		4.1.1 Память процесса можно сравнить с водой в аквариуме; Вычислительная система с 1 процессором в каждый момент времени может исполнять не более одного потока; Операционная система располагается в той же физической памяти, что и пользовательские процессы
	4.2 Многозадачность
		4.2.1 CPU Burst — участок программы, требующий ресурсов центрального процессора; Если известны интервалы CPU burst и IO burst, то возможно оптимальное планирование; Если приложение ожидает окончания ввода-вывода, то процессор может исполнять другое приложение; Возможна ситуация простоя процессора при наличии нескольких одновременно исполняющихся приложений
		4.2.2 0
		4.2.3 В системе с одним процессором в состоянии Active может находиться не более 1 потока; Перемещение потоков между состояниями выполняет планировщик
		4.2.4 При невытесняющей многозадачности операционная система не заботится о том, чтобы сохранить полный контекст; Невытесняющая многозадачность — это размен управляемости на скорость; Смена контекста происходит быстрее в случае невытесняющей многозадачности; При вытесняющей многозадачности процесс не знает о том, что его вытесняют
	4.3 Синхронизация потоков
		4.3.1 Потоки одного процесса работают в одном адресном пространстве; Доступ к данным приложения, хранящимся в памяти, может быть не атомарным
		4.3.2 Программист должен стремиться минимизировать участок кода, выполняющийся в критической секции; Критическая секция — это фрагмент кода, в котором выполняется доступ к разделяемому ресурсу; В критической секции не может быть более одного потока
		4.3.3 123
		4.3.4 Высокоуровневые примитивы (методы) синхронизации, доступные в языках высокого уровня, могут опираться на TSL
		4.3.5 lock(E); lock(C); lock(D); unlock(D); unlock(C); unlock(E)
5 Организация памяти
	5.1 Классификация видов памяти
		5.1.1 Регистры процессора; Random Access Memory; Внутренний жесткий диск; Внешний USB накопитель; CD-диск
	5.2 Арифметика указателей
		5.2.1 Размер указателя не зависит от размера объекта, на который он указывает в памяти; Размер указателя в битах, как правило, совпадает с разрядностью шины адреса; Указатель — это переменная, хранящая адрес
		5.2.2 4
		5.2.3 Приложение использует свое адресное пространство монопольно; 'Виртуальная память' и 'paging' — это одно и то же; Если процесс обращается к странице, отсутствующей в памяти, то операционная система загрузит эту страницу в память
		5.2.4 В защищенном режиме сегменты могут перекрываться
	5.3 Память процесса
		5.3.1 В адресном пространстве процесса есть диапазон для взаимодействия с другими процессами; Операционная система имеет свой собственный стек; Системная куча — память, которая может быть отдана приложению
		5.3.2 -4
		5.3.3 4
		5.3.4 Инструкция call позволяет осуществлять переход с возвратом; Сделав переход с использованием jmp, сложно определить откуда этот переход был сделан; Для возврата к месту вызова в call используется стек
		5.3.5 20
		5.3.6 При возврате значений через стек память в нем должна быть выделена вызывающей функцией; Возврат значения может быть выполнен через регистр; Возврат значения можно выполнить через стек
		5.3.7 ABI определяет правила выравнивания данных в памяти; ABI определяет формат имен символов в объектных файлах; ABI определяет, кто именно (вызывающая или вызываемая функция) выделяет место в стеке; ABI определяет разрядность
	5.4 Устройство дисковых накопителей
		5.4.1 Информация хранится блоками фиксированного размера; Актуатор — это компонент, на котором размещены считывающие/записывающие головки; Для минимизации повреждений ферро-магнитного покрытия актуатор неработающего диска фиксируется (паркуется)
		5.4.2 574
	5.5 Файловые системы
		5.5.1 Помимо собственно данных файла на диске хранятся имена и другие атрибуты; Файловая система обеспечивает управление именами файлов; Файловая система обеспечивает поиск данных и файлов на диске
		5.5.2 Каталог может хранить (ссылаться) как файлы, так и каталоги; Файловая система, как правило, является иерархической
		5.5.3 На диске может быть более одного раздела
6 Межпроцессное взаимодействие
	6.1 Назначение и виды IPC
		6.1.1 Именованные каналы должны иметь имя в дереве файловой системы; Разделяемая память — это регион физической памяти, отображенный на адресное пространство более чем одного процесса; Технически pipe — это буфер в памяти, устроенный по принципу FIFO
	6.2 Принципы организации IP сетей
		6.2.1 Протоколы доступа к электронной почте работают на прикладном уровне сети; Сокеты — стандартный системный интерфейс для сетевых взаимодействий; Маршрутизация работает на сетевом уровне; MAC-адрес позволяет обеспечить доступ к физической среде; Сокеты абстрагируют множество используемых адресов (семейство адресов)
		6.2.2 511
		6.2.3 Шлюз — это узел в локальной сети, обеспечивающий передачу трафика во внешнюю сеть (или из внешней сети)
	6.3 Понятие сокета
		6.3.1 Broadcast
		6.3.2 socket; bind; sendto; recvfrom
		6.3.3 socket; bind; listen; accept; recv; send
	6.4 Прикладные протоколы
		6.4.1 DNS сервер верхнего уровня может не знать имен более нижних уровней, входящих в домен; В адресе www.yandex.ru доменом верхнего уровня является ru
		6.4.2 Сервер DHCP "знает" IP-адрес шлюза в текущей сети; По DHCP можно получить точное время или информацию о сервере точного времени; DHCP выдает IP-адрес подключаемым узлам из предопределенного пула; Используя DHCP, можно обеспечить загрузку бездисковых станций
		6.4.3 Размер памяти, способной хранить 2^30 (1 073 741 824) битов, можно сокращенно назвать гибибит; В килобайте 1000 байт; Данные файла хранятся в блоках, поэтому в последнем блоке может быть свободное место, не занятое данными; Адресное пространство процесса может быть больше реального размера физической памяти; Как правило, в процессоре с системой команд CISC больше инструкций, чем в подобном процессоре с системой команд RISC; При вытесняющей многозадачности процессам не нужно заботиться о сохранении контекста; Существуют варианты архитектуры операционной системы, в которых функции планирования и выделения памяти работают вне ядра